02_Spring Controller.txt

# Spring Web

	- 컨트롤러는 의존성에 Spring Web을 추가해야 사용할 수 있다.(Spring MVC)
	- 아파치 톰캣 서버가 기본적으로 내장되어 있다.
	- 다양한 어노테이션을 활용해 MVC 디자인 패턴을 적용할 수 있다.
	- 그 외에도 웹 개발에 필요한 수많은 라이브러리들이 포함되어 있다.(로깅, 바인딩, 테스트 등)
	
# MVC 디자인 패턴을 적용한 웹 프로젝트의 작명법

	- Model : dto(getter/setter) 또는 vo(getter, 읽기 전용) 클래스
	- View : Thymeleaf
	- xxxController : 처리 과정에서 처리 흐름을 담당하는 코드들
	- xxxService : 처리 과정에서 처리 내용(비즈니스 로직)을 담당하는 코드들
	- xxxDao, xxxMapper : 처리 과정에서 DB로의 접근을 담당하는 코드들
	
# Spring Controller

	- 클래스 위에 @Controller를 붙이면 스프링 MVC 컨트롤러가 된다.
	- 컨트롤러는 스프링 프로젝트에 의해 자동으로 수거되어 Spring Context에 보관되고 필요할 때마다 알아서 활용된다.
	- 요청 uri와 method를 통해 어떤 요청인지를 식별하여 원하는 처리를 진행할 수 있다.(e.g. @GetMapping("/home")를 달아놓으면 알맞는 처리를 진행)

# Spring Controller에서 사용하는 어노테이션들

	@Controller
	
		- 해당 클래스가 컨트롤러임을 알린다.
		- 수거되어 Spring Context에 등록된다.
		
	@RequestMapping(value={"uri",}, method={method, })
	
		- 클래스 또는 메서드 위에 사용하는 어노테이션
		- 해당 메서드가 설정한 주소와 요청 방식을 처리하는 메서드임을 명시해둔다.
		
	@GetMapping(value={"", })
	
		- @RequestMapping(value={"uri",}, method=RequestMethod.GET)을 생략한 어노테이션
	
	@PostMapping(value={"", })
	
		- @RequestMapping(value={"uri",}, method=RequestMethod.POST)을 생략한 어노테이션
		
	@PutMapping, @DeleteMapping, @PatchMapping, ...
	
# 컨트롤러의 매개변수 활용하기

	- 컨트롤러의 매개변수에 원하는 변수를 설정해두면 스프링이 알아서 필요한 인스턴스를 전달한다.
	- 컨트롤러에서 활용할 수 있는 매개변수의 종류
	
		(1) HttpServletRequest
		
			- 컨트롤러의 매개변수에 HttpServletRequest 변수를 선언해두면 스프링이 알아서 해당 매개변수에 JSP 요청객체를 전달해준다.
			- JSP에서 배운 모든 기능을 활용할 수 있다. 
			
		(2) HttpServletResponse
		
			- 컨트롤러의 매개변수에 HttpServletResponse 변수를 선언해두면 스프링이 알아서 해당 매개변수에 JSP 요청객체를 전달해준다.
			- JSP에서 배운 모든 기능을 활용할 수 있다.
			
		(3) 자바빈 형식의 모델 객체 (DTO)
		
			- 자바빈 형식?
			
				+ 데이터 클래스를 만들 때 계속해서 사용하던 방식
				+ 필드값의 접근 제어자는 private이어야 한다.
				+ 필드를 private으로 설정한 후 접근은 getter/setter를 사용한다.
				+ 기본 생성자가 반드시 존재해야 한다.
				+ 자바빈 스타일 객체는 다양한 프레임워크, API, 라이브러리들에서 사용하는 표준이기 때문에 반드시 지키는 것이 좋다.
				
			- 자바빈 객체를 매개변수로 사용하면 파라미터를 편리하게 받을 수 있다.
			- name 속성과 필드명이 동일할 때 값을 자동으로 바인딩하여 받게 된다. 	
			
		(4) 전달받을 파라미터와 같은 이름의 매개변수
		
			- 파라미터의 이름과 같은 이름으로 매개변수를 설정해두면 바인딩된다.	
			- 만약 파라미터의 이름과 다른 이름의 매개변수를 사용하고 싶다면 @ModelAttribute("paramName") 어노테이션을 활용해 바인딩할 수 있다.
			
		(5) Model 객체
		
			- 데이터를 뷰로 넘기기 위한 객체
			- request 객체에서 뷰로 데이터를 넘기는 기능만 특화하여 분리한 객체
			- 즉, addAttribute() 전문 객체
			
# 스프링 컨트롤러 메서드의 리턴 타입

	1. 다음 view를 찾는 타입
	
		(1) String
		
			- src/main/resources/templates에 있는 .html 파일을 찾아간다.
			- 리턴한 문자열이 templates 내부에서의 경로를 의미한다.
			
		(2) void
		
			- 컨트롤러로 접속할 때 사용한 uri를 그대로 사용해 templates에서 다음 view를 찾는다.
		
		(3) ModelAndView (구식)
		
			- 다음 뷰의 정보와 필요한 데이터를 모두 실어 놓을 수 있는 객체
			- 하나의 객체가 두 가지 이상의 일을 하므로 버려진 객체
	
	2. 다음 view를 찾지 않고 바로 응답해버리는 타입(주로 REST API에 사용)
	
		(1) 자바빈 객체 타입을 리턴 : 정해진 형식으로 데이터를 응답한다.
		
		(2) ResponseEntity : 직접 원하는 응답을 조립하여 응답하는 방식