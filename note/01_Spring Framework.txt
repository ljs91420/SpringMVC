01_Spring Framework.txt

# 프레임워크

	- 프로젝트 개발에 효율적인 구조를 미리 만들어 놓은 것
	- 개발자들은 이미 완성된 구조에 빈칸을 채우는 형식으로 개발을 진행할 수 있다.
	- 전체적인 구조에 신경을 덜 써도 되기 때문에 디자인 패턴을 제대로 이해하기 힘든 (저렴한) 초보 개발자들도 프로젝트에 투입할 수 있다.
	- 어느 정도 수준 이상의 품질이 항상 보장된다.
	
# 스프링 프레임워크

	- Java, JSP를 활용해 웹 애플리케이션 서버 개발을 쉽게 진행하기 위한 프레임워크
	- Java, JSP를 더욱 효율적(객체지향적)으로 사용하기 위한 다양한 디자인 패턴 및 기능들을 미리 구현해놓은 프레임워크
	- JSP 관련 책(JSP로 효율적으로 쓰는 법)의 예제에서 시작된 프레임워크다.
	
# 스프링 프레임워크에 적용되어 있는 여러 컨셉들

	1. POJO(Plain Old Java Object)
	
		- JSP의 문법 같은 복잡한 새로운 문법의 사용을 지양해야 한다.
		- 백엔드에는 절대로 JSP 코드르 사용하지 않고 순수 JAVA를 사용해야 한다.
		- 프로젝트에 익숙치 않은 별도의 API를 사용하지 않음으로써 개발자의 혼란을 최소화해야 한다.
		
	2. 의존성 주입 (DI, Dependency Injection)
	
		- 생성자는 유지보수를 어렵게 만드는 장애물이다.
		- 필요한 곳에 적절한 인스턴스를 외부에서 공급해줌으로써 생성자의 사용을 제거해야 한다.
		- 의존성 주입을 통해 프로젝트 소스 코드 간의 결합도를 낮출 수 있다.(결합도가 높은 상태 : 하나 수정하면 소스 코드 100개 수정해야 하는 상태)
		
	3. MVC 디자인 패턴
	
		- 하나의 프로젝트를 구성하는 모든 코드들을 크게 세 가지 종류로 분류하는 디자인 패턴
		- 프로젝트를 구성하는 코드들의 종류에는 Model, View, Controller의 절차를 따른다.
		- Model : 데이터를 담아서 활용하기 위해 필요한 코드들 (dto)
		- View : 화면을 구성하기 위해 필요한 코드들(웹으로 치면 .jsp)
		- Controller : 사용자가 원하는 처리를 진행하기 위해 필요한 코드들(처리라는 것은 굉장히 다양하기 때문에 여러 가지 분야로 분류될 수 있음)
		
	4. 관점 지향형 프로그래밍(AOP)
	
		- 여러 개의 클래스에서 반복해서 사용하는 코드가 있을 때 해당 코드를 모듈화하여 하나의 공통 관심사로 분리하는 프로그래밍 방법론
		- 스프링에서는 관점 지향형 프로그래밍을 쉽게 적용할 수 있는 다양한 기능들을 제공한다.
		
# 스프링 부트 프로젝트(Maven)의 기본 구조

	- src/main/java : 자바 코드를 작성하는 곳
	- src/main/resources : 프로젝트에 필요한 자원들을 보관해두는 곳(다양한 라이브러리들이 기본적으로 이 경로를 참조하도록 약속되어 있음)
	- src/test/java : 작성한 자바 코드에 대한 테스트 코드를 작성하는 곳
	- Maven Dependencies : 이 프로젝트가 의존하고 있는 다른 프로젝트들(처음 프로젝트 설정할 때 추가했던 것들)
	- src : 실제 폴더의 모습을 볼 때 사용
	- mvnw : 메이븐 프로젝트 관리 프로그램, 다양한 명령어를 통해 프로젝트를 관리할 수 있다.
	- pom.xml : 메이븐이 프로젝트를 관리하게 위해 사용하는 xml 파일
	- target : 프로젝트 빌드 결과물이 보관되는 장소
		
# 생성한 프로젝트 접속 확인해보기

	- com.ezen.springmvc.controller.HomeController
	
		@Controller
		public class HomeController {
			@GetMapping("/home")
			public String index() {
				return "index";
			}
		}
	
	@Controller : 이 클래스가 MVC의 Controller 역할을 하는 클래스임을 스프링에게 알린다. 스프링은 이 클래스를 알아서 가져다 쓴다.
	
	@GetMapping("uri") : GET방식에 해당 주소로 요청하는 요청들을 이 메서드에 매핑해준다.
	
	return "index"; : src/main/resources/templates 밑의 index.html을 찾아간다.(의존성에 Thymeleaft가 적용되어 있을 때만 동작한다.)
	